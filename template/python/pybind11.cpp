#include <pybind11/pybind11.h>
#include "verilated.h"
#include "{{dut_name}}.h"

namespace py = pybind11;

// Util functions
inline std::string &trim(std::string &s)
{
    if (s.empty())
    {
        return s;
    }
    s.erase(0, s.find_first_not_of(" "));
    s.erase(s.find_last_not_of(" ") + 1);
    s.erase(0, s.find_first_not_of("\r"));
    s.erase(s.find_last_not_of("\r") + 1);
    s.erase(0, s.find_first_not_of("\n"));
    s.erase(s.find_last_not_of("\n") + 1);
    return s;
}


inline std::vector<std::string> strsplit(std::string str, std::string s = " ")
{
    std::vector<std::string> ret;
    int start = 0;
    int end = str.find(s);
    while (end != -1)
    {
        auto sub = str.substr(start, end - start);
        trim(sub);
        ret.push_back(sub);
        start = end + s.size();
        end = str.find(s, start);
    }
    auto sub = str.substr(start, end - start);
    trim(sub);
    ret.push_back(sub);
    return ret;
}


void commandArgs(VerilatedContext &self, std::string kwargs=""){
    auto args = strsplit(kwargs);
    std::vector<char *> cstrs;
    cstrs.reserve(args.size());
    for (auto &s : args) cstrs.push_back(const_cast<char *>(s.c_str()));
    return self.commandArgs(int(cstrs.size()), cstrs.data());
}


// Wrapper classes
class MCVWrapper{
    public:
    {{dut_name}} *dut = nullptr;
    MCVWrapper(VerilatedContext* ctx, std::string top="top"){
        this->dut = new {{dut_name}}(ctx, top.c_str());
    }
    // Generated METHODS
    {{mcv_wrapper_funcs}}
    // Generated Attribus
    {{mcv_wrapper_getset}}
};


PYBIND11_MODULE({{mode_name}}, m) {
    m.doc() = "Model: {{mode_name}}. Generated by tool Multi-language-based Chip Verification (MCV)"
              "Version: {{mcv_version}}, Gen Time: {{mcv_time}}";

    // Default verilator APIs
    py::class_<VerilatedContext>(m, "VerilatedContext")
        .def(py::init<>())
        .def("commandArgs", &commandArgs, py::arg("kwargs") = "")
        .def("gotFinish", static_cast<bool (VerilatedContext::*)() const>(&VerilatedContext::gotFinish));

    // Generated by UDT
    py::class_<MCVWrapper>(m, "{{dut_name}}")
        .def(py::init([](VerilatedContext* ctx, std::string top="top"){
            return MCVWrapper(ctx, top);
        }))
        {{mcv_dut_getset}}
        {{mcv_dut_funcs}};
}
