# File       : example_python.py
# Author     : automatically generated by picker
# Date       : {{datenow}}
# Description: This is a template generated by picker. use this,you can  achieve 
#              communication between UVM and Python.
# Version    : {{version}}

class {{className}}:
    def __init__(self, msg):
        {%for data in variables -%}
        {{data.name}} = 0
        {%endfor -%}
        self.from_msg(msg)

    def from_msg(self,msg):
        def convert_msg(self, {%for data in variables -%} {{data.name}}{%if not loop.is_last -%}, {%endif -%}{%endfor -%}):
            {%for data in variables -%}
            {%if data.nums == 1 -%}
            low_x_bits = int(''.join(format({{data.name}}, '08b') ), 2) & ((1 << {{data.numsorigin}}) - 1)
            self.{{data.name}} = bin(low_x_bits)[2:].zfill({{data.numsorigin}})
            {%else -%}
            low_x_bits = int(''.join(format(byte, '08b') for byte in {{data.name}}), 2) & ((1 << {{data.numsorigin}}) - 1)
            self.{{data.name}} = bin(low_x_bits)[2:].zfill({{data.numsorigin}})
            {%endif -%}
            {%endfor %}
        
        {%for data in variables -%}
        {%if data.macro == 1 -%}
        {{data.macro_name}} = {{data.numsorigin}}
        {%endif -%}
        {%endfor -%}
        {% set counter =  0 -%}
        #convert_msg(self, {% for data in variables -%}msg[{{ data.start_index }},{{ data.end_index }}]{% if not loop.is_last -%}, {% endif -%}{% endfor %})
        convert_msg(self, {%for data in variables -%}{%if data.nums == 1 -%}msg[{{counter}}],{% set counter = counter + 1 -%}{%else -%}msg[{{counter}}:{%for i in range(data.nums) -%}{% set counter = counter + 1 -%} {%endfor -%}{{counter}}]{%if not loop.is_last -%},{%endif -%}{%endif -%}{%endfor -%})
    
    def to_msg(self):
        def add_zero(bytes):
            padding = 8 - len(bytes) % 8
            if(padding != 8):
                bytes = '0'*padding + bytes
            return bytes
        {%for data in variables -%}
        {{data.name}} = add_zero(self.{{data.name}})
        {%endfor -%}
        byte_str = {%for data in variables%} {{data.name}} {%if not loop.is_last -%}+ {%endif -%}{%endfor%}
        byte_list = [int(byte_str[i:i+8],2).to_bytes(1,'big') for i in range(0,len(byte_str),8)]
        byte_stream = b''.join(byte_list)
        return byte_stream

class {{className}}_list:
    def __init__(self,message):
        self.transaction_list = []
        if(len(message) != 0):
            self.to_list(message)
    
    def to_list(self, message):
        index = 0
        chunk_size = {{byte_stream_count}}
        while index < len(message):
            chunk = message[index:index+chunk_size]
            index+=chunk_size
            tr = {{className}}(chunk)
            self.transaction_list.append(tr)
